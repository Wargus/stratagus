$using namespace gcn;

#include "font.h"

enum ViewportModeType {
	VIEWPORT_SINGLE = 0,
	VIEWPORT_SPLIT_HORIZ,
	VIEWPORT_SPLIT_HORIZ3,
	VIEWPORT_SPLIT_VERT,
	VIEWPORT_QUAD
};

class LuaActionListener
{
	LuaActionListener(lua_State *lua, lua_Object luaref);
};

class CUIButton
{
	CUIButton();

	int X;
	int Y;
	string Text;
	ButtonStyle *Style;
	LuaActionListener *Callback;
};

$[
_uiButtonCallbacks = {}
CUIButton.SetCallback = function(w, f)
  w.Callback = LuaActionListener(f)
  table.insert(_uiButtonCallbacks, w.Callback)
end
$]

class CMapArea
{
	int X;
	int Y;
	int EndX;
	int EndY;
	int ScrollPaddingLeft;
	int ScrollPaddingRight;
	int ScrollPaddingTop;
	int ScrollPaddingBottom;
};

class CViewport
{
};

class CFiller
{
	CFiller();

	CGraphicPtr G;
	int X;
	int Y;
};

class vector
{
	TOLUA_TEMPLATE_BIND(T, CFiller, CUIButton, CUIUserButton, string)

	const T& operator[](int index) const;
	T& operator[](int index);
	const T& at(int index) const;
	T& at(int index);

	const T& front() const;
	T& front();
	const T& back() const;
	T& back();

	void push_back(T val);
	void pop_back();

	void assign(int num, const T& val);
	void clear();
	bool empty() const;
	int size() const;
};


class CButtonPanel
{
	int X;
	int Y;
	vector<CUIButton> Buttons;
	CColor AutoCastBorderColorRGB;
	bool ShowCommandKey;
};

class CPieMenu
{
	CGraphicPtr G;
	int MouseButton;
	int X[8];
	int Y[8];

	void SetRadius(int radius);
};

class CResourceInfo
{
	CGraphicPtr G;
	int IconFrame;
	int IconX;
	int IconY;
	int IconWidth;
	int TextX;
	int TextY;
};

class CInfoPanel
{
	CGraphicPtr G;
	int X;
	int Y;
};

class CUIUserButton
{
	CUIUserButton();

	bool Clicked;
	CUIButton Button;
};

class CStatusLine
{
	void Set(const std::string status);
	const std::string &Get();
	void Clear();

	int Width;
	int TextX;
	int TextY;
	CFont *Font;
};

class CUITimer
{
	int X;
	int Y;
	CFont *Font;
};

class CUserInterface
{
	string NormalFontColor;
	string ReverseFontColor;

	vector<CFiller> Fillers;

	CResourceInfo Resources[MaxResourceInfo];
	CInfoPanel InfoPanel;
	string DefaultUnitPortrait;
	CUIButton *SingleSelectedButton;

	vector<CUIButton> SelectedButtons;
	CFont *MaxSelectedFont;
	int MaxSelectedTextX;
	int MaxSelectedTextY;

	CUIButton *SingleTrainingButton;
	vector<CUIButton> TrainingButtons;
	CUIButton *UpgradingButton;
	CUIButton *ResearchingButton;
	vector<CUIButton> TransportingButtons;

	vector<string> LifeBarColorNames;
	vector<int> LifeBarPercents;
	int LifeBarYOffset;
	int LifeBarPadding;
	bool LifeBarBorder;

	CColor CompletedBarColorRGB;
	bool CompletedBarShadow;

	CButtonPanel ButtonPanel;

	CPieMenu PieMenu;

	CViewport *MouseViewport;
	CMapArea MapArea;

	CFont *MessageFont;
	int MessageScrollSpeed;

	CUIButton MenuButton;
	CUIButton NetworkMenuButton;
	CUIButton NetworkDiplomacyButton;

	vector<CUIUserButton> UserButtons;

	CMinimap Minimap;
	CStatusLine StatusLine;
	CUITimer Timer;

	Vec2i EditorSettingsAreaTopLeft;
	Vec2i EditorSettingsAreaBottomRight;
	Vec2i EditorButtonAreaTopLeft;
	Vec2i EditorButtonAreaBottomRight;

	void Load();
};

extern tolua_readonly CUserInterface UI;

class CIcon
{
	static CIcon *New(const std::string ident);
	static CIcon *Get(const std::string ident);

	tolua_readonly tolua_property__s std::string Ident;
	CPlayerColorGraphicPtr G;
	int Frame;

	void ClearExtraGraphics();
	void AddSingleSelectionGraphic(CPlayerColorGraphicPtr g);
	void AddGroupSelectionGraphic(CPlayerColorGraphicPtr g);
	void AddContainedGraphic(CPlayerColorGraphicPtr g);
};

extern ButtonStyle *FindButtonStyle(const std::string style);

extern bool GetMouseScroll(void);
extern void SetMouseScroll(bool enabled);
extern bool GetKeyScroll(void);
extern void SetKeyScroll(bool enabled);
extern bool GetGrabMouse(void);
extern void SetGrabMouse(bool enabled);
extern bool GetLeaveStops(void);
extern void SetLeaveStops(bool enabled);
extern int GetDoubleClickDelay(void);
extern void SetDoubleClickDelay(int delay);
extern int GetHoldClickDelay(void);
extern void SetHoldClickDelay(int delay);

extern void SetScrollMargins(unsigned int top, unsigned int right, unsigned int bottom, unsigned int left);

extern PixelPos CursorScreenPos;

//
//  Guichan
//

class Color
{
	Color(int r, int g, int b, int a = 255);
	int r;
	int g;
	int b;
	int a;
};

class Graphics
{
	enum Alignment{
		Left @ LEFT = 0,
		Center @ CENTER,
		Right @ RIGHT
	};
};

class Widget
{
	virtual void setWidth(int width);
	virtual int getWidth() const;
	virtual void setHeight(int height);
	virtual int getHeight() const;
	void setSize(int width, int height);
	virtual void setX(int x);
	virtual int getX() const;
	virtual void setY(int y);
	virtual int getY() const;
	virtual void setPosition(int x, int y);
	virtual void setFrameSize@ setBorderSize(int width);
	virtual unsigned int getFrameSize @ getBorderSize() const;
	virtual void setEnabled(bool enabled);
	virtual bool isEnabled() const;
	virtual void setVisible(bool visible);
	virtual bool isVisible() const;

	tolua_outside virtual void setDirty @ setDirty(bool isDirty);

	tolua_outside virtual void setBaseColor @ setBaseColor(const Color color);
	virtual const Color &getBaseColor() const;
	virtual void setForegroundColor(const Color color);
	virtual const Color &getForegroundColor() const;
	tolua_outside virtual void setBackgroundColor @ setBackgroundColor(const Color color);
	virtual const Color &getBackgroundColor() const;
	tolua_outside virtual void setDisabledColor @ setDisabledColor(const Color color);

	static void setGlobalFont(CFont *font);
	tolua_outside virtual void setFont @ setFont(CFont *font);

	virtual int getHotKey() const;
	virtual void setHotKey(const int key);
	tolua_outside virtual void setHotKey @ setHotKey(const char *key);

	virtual void requestFocus();

	tolua_outside virtual void addActionListener @ addActionListener(LuaActionListener *actionListener);
	virtual void addMouseListener(LuaActionListener *actionListener);
	virtual void addKeyListener(LuaActionListener *actionListener);
};

$[
Widget.setActionCallback = function(w, f)
  local lal = LuaActionListener(f)
  if not w._actioncb then
    w._actioncb = {}
  end
  table.insert(w._actioncb, lal)
  w:addActionListener(lal)
end

Widget.setMouseCallback = function(w, f)
  local lal = LuaActionListener(f)
  if not w._mousecb then
    w._mousecb = {}
  end
  table.insert(w._mousecb, lal)
  w:addMouseListener(lal)
end

Widget.setKeyCallback = function(w, f)
  local lal = LuaActionListener(f)
  if not w._keycb then
    w._keycb = {}
  end
  table.insert(w._keycb, lal)
  w:addKeyListener(lal)
end
$]

class BasicContainer : public Widget
{
};

class ScrollArea : public BasicContainer
{
	ScrollArea();
	virtual void setContent(Widget *widget);
	virtual Widget *getContent();
	virtual void setScrollbarWidth(int width);
	virtual int getScrollbarWidth();
	tolua_outside virtual void scrollToBottom @ scrollToBottom();
	tolua_outside virtual void scrollToTop @ scrollToTop();
};

class ImageWidget : public Widget
{
	ImageWidget(CGraphicPtr image);
	ImageWidget(MngPtr image);
	ImageWidget(Movie *image);
};

class Button : public Widget
{
	virtual void setCaption(const std::string caption);
	virtual const std::string &getCaption() const;
	virtual void adjustSize();
};

class ButtonWidget : public Button
{
	ButtonWidget(const std::string caption);
};

class CImageButton : public Button
{
	CImageButton();
	CImageButton(const std::string caption);

	void setNormalImage(CGraphicPtr image);
	void setPressedImage(CGraphicPtr image);
	void setDisabledImage(CGraphicPtr image);
};

$renaming CImageButton @ ImageButton

class RadioButton : public Widget
{
	RadioButton();
	RadioButton(const std::string caption, const std::string group, bool marked = false);

	virtual bool isSelected @ isMarked();
	virtual void setSelected @ setMarked(bool marked);
	virtual const std::string &getCaption() const;
	virtual void setCaption(const std::string caption);
	virtual void setGroup(const std::string group);
	virtual const std::string &getGroup() const;
	virtual void adjustSize();
};

class ImageRadioButton : public RadioButton
{
	ImageRadioButton();
	ImageRadioButton(const std::string caption, const std::string group, bool marked = false);

	void setUncheckedNormalImage(CGraphicPtr image);
	void setUncheckedPressedImage(CGraphicPtr image);
	void setUncheckedDisabledImage(CGraphicPtr image);
	void setCheckedNormalImage(CGraphicPtr image);
	void setCheckedPressedImage(CGraphicPtr image);
	void setCheckedDisabledImage(CGraphicPtr image);
};

class CheckBox : public Widget
{
	CheckBox();
	CheckBox(const std::string caption, bool marked = false);

	virtual bool isSelected @ isMarked() const;
	virtual void setSelected @ setMarked(bool marked);
	virtual const std::string &getCaption() const;
	virtual void setCaption(const std::string caption);
	virtual void adjustSize();
};

class ImageCheckBox : public CheckBox
{
	ImageCheckBox();
	ImageCheckBox(const std::string caption, bool marked = false);

	void setUncheckedNormalImage(CGraphicPtr image);
	void setUncheckedPressedImage(CGraphicPtr image);
	void setUncheckedDisabledImage(CGraphicPtr image);
	void setCheckedNormalImage(CGraphicPtr image);
	void setCheckedPressedImage(CGraphicPtr image);
	void setCheckedDisabledImage(CGraphicPtr image);
};

class Slider : public Widget
{
	Slider(double scaleEnd = 1.0);
	Slider(double scaleStart, double scaleEnd);
	virtual void setScale(double scaleStart, double scaleEnd);
	virtual double getScaleStart() const;
	virtual void setScaleStart(double scaleStart);
	virtual double getScaleEnd() const;
	virtual void setScaleEnd(double scaleEnd);
	virtual double getValue();
	virtual void setValue(double value);
	virtual void setMarkerLength(int length);
	virtual int getMarkerLength() const;
	virtual void setOrientation(Orientation orientation);
	virtual unsigned int getOrientation() const;
	virtual void setStepLength(double length);
	virtual double getStepLength() const;

	enum Orientation {
		Horizontal @ HORIZONTAL = 0,
		Vertical @ VERTICAL
	};
};

class ImageSlider : public Slider
{
	ImageSlider(double scaleEnd = 1.0);
	ImageSlider(double scaleStart, double scaleEnd);
	void setMarkerImage(CGraphicPtr image);
	void setBackgroundImage(CGraphicPtr image);
	void setDisabledBackgroundImage(CGraphicPtr image);
};

class Label : public Widget
{
	Label(const std::string caption);
	const std::string &getCaption() const;
	void setCaption(const std::string caption);
	virtual void setAlignment(Graphics::Alignment alignment);
	virtual unsigned int getAlignment();
	virtual void adjustSize();
};

class MultiLineLabel : public Widget
{
	MultiLineLabel();
	MultiLineLabel(const std::string caption);

	virtual void setCaption(const std::string caption);
	virtual const std::string &getCaption() const;
	virtual void setAlignment(unsigned int alignment);
	virtual gcn::Graphics::Alignment getAlignment();
	virtual void setVerticalAlignment(unsigned int alignment);
	virtual unsigned int getVerticalAlignment();
	virtual void setLineWidth(int width);
	virtual int getLineWidth();
	virtual void adjustSize();

	enum {
		LEFT = 0,
		CENTER,
		RIGHT,
		TOP,
		BOTTOM
	};
};

class CTextBox : public Widget
{
	CTextBox(const std::string text);
	virtual void setEditable(bool editable);
	virtual std::string getText();
};

$renaming CTextBox @ TextBox

class CTextField : public Widget
{
	CTextField(const std::string text);
	virtual void setText(const std::string text);
	virtual std::string &getText();
	virtual void setPassword(bool flag);
};

$renaming CTextField @ TextField

class ImageTextField : public Widget
{
	ImageTextField(const std::string text);
	virtual void setText(const std::string text);
	virtual std::string &getText();
	void setItemImage(CGraphicPtr image);
	virtual void setPassword(bool flag);
};

class ListBox : public Widget
{
};

class ImageListBox : public ListBox
{
};

class ListBoxWidget : public ScrollArea
{
	ListBoxWidget(unsigned int width, unsigned int height);
	void setList(lua_State *lua, lua_Object *lo);
	void setSelected (int selected);
	int getSelected();
};

class ImageListBoxWidget : public ListBoxWidget
{
	ImageListBoxWidget(unsigned int width, unsigned int height);
	void setList(lua_State *lua, lua_Object *lo);
	void setSelected (int selected);
	int getSelected();
	void setItemImage(CGraphicPtr image);
	void setUpButtonImage(CGraphicPtr image);
	void setUpPressedButtonImage(CGraphicPtr image);
	void setDownButtonImage(CGraphicPtr image);
	void setDownPressedButtonImage(CGraphicPtr image);
	void setLeftButtonImage(CGraphicPtr image);
	void setLeftPressedButtonImage(CGraphicPtr image);
	void setRightButtonImage(CGraphicPtr image);
	void setRightPressedButtonImage(CGraphicPtr image);
	void setHBarImage(CGraphicPtr image);
	void setVBarImage(CGraphicPtr image);
	void setMarkerImage(CGraphicPtr image);
};

class Window : public BasicContainer
{
	Window();
	Window(const std::string caption);

	virtual void setCaption(const std::string caption);
	virtual const std::string &getCaption() const;
	virtual void setAlignment(Graphics::Alignment alignment);
	virtual unsigned int getAlignment() const;
	virtual void setPadding(unsigned int padding);
	virtual unsigned int getPadding() const;
	virtual void setTitleBarHeight(unsigned int height);
	virtual unsigned int getTitleBarHeight();
	virtual void setMovable(bool movable);
	virtual bool isMovable() const;
	virtual void resizeToContent();
	virtual void setOpaque(bool opaque);
	virtual bool isOpaque();
};

class Windows : public Window
{
	Windows(const std::string text, int width, int height);
	void add(Widget *widget, int x, int y);
};

class ScrollingWidget : public ScrollArea
{
	ScrollingWidget(int width, int height);
	void add(Widget *widget, int x, int y);
	void restart();
	void setSpeed(float speed);
	float getSpeed();
};

class DropDown : public BasicContainer
{
	virtual int getSelected();
	virtual void setSelected(int selected);
};

class DropDownWidget : public DropDown
{
	DropDownWidget();
	void setList(lua_State *lua, lua_Object *lo);
	void setSize(int width, int height);
};

class ImageDropDownWidget : public DropDown
{
	ImageDropDownWidget();
	std::string getSelectedItem();
	int setSelectedItem(lua_State *lua, lua_Object *lo);
	void setList(lua_State *lua, lua_Object *lo);
	void setSize(int width, int height);
	void setItemImage(CGraphicPtr image);
	void setDownNormalImage(CGraphicPtr image);
	void setDownPressedImage(CGraphicPtr image);
};

class StatBoxWidget : public Widget
{
	StatBoxWidget(int width, int height);

	void setCaption(const std::string s);
	const std::string &getCaption() const;
	void setPercent(const int percent);
	int getPercent() const;
};

class Container : public BasicContainer
{
	Container();
	virtual void setOpaque(bool opaque);
	virtual bool isOpaque() const;
	virtual void add(Widget *widget, int x, int y);
	virtual void remove(Widget *widget);
	virtual void clear();
};

class MenuScreen : public Container
{
	MenuScreen();

	int run(bool loop = true);
	void stop(int result = 0);
	void stopAll(int result = 0);
	void addLogicCallback(LuaActionListener *actionListener);
	void setDrawMenusUnder(bool drawunder);
	bool getDrawMenusUnder();
};
$renaming MenuScreen @ CMenuScreen

$[
function MenuScreen()
  local menu = CMenuScreen()

  -- Store the widget in the container. This way we keep a reference
  -- to the widget until the container gets deleted.
  local guichanadd = Container.add
  function menu:add(widget, x, y)
    if not self._addedWidgets then
       self._addedWidgets = {}
    end
    self._addedWidgets[widget] = true
    guichanadd(self, widget, x, y)
  end

  return menu
end
$]

void CenterOnMessage();
void ToggleShowMessages();
void SetMaxMessageCount(int max);
void UiFindIdleWorker();
void CycleViewportMode(int step);
void UiToggleTerrain();
void UiTrackUnit();
void SetNewViewportMode(ViewportModeType new_mode);

void SetDefaultTextColors(const std::string &normal, const std::string &reverse);

void LoadDecorations();
void InitUserInterface();
